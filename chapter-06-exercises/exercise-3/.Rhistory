ten
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
ten
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches) * 39.37
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperical_to_metric(5, 2)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches) * 39.37
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches) / 39.37
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches)  .0254
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches) * .0254
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
value <- num + 3
value
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
length <- ((feet * 12) + inches) / 39.37
length
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
print(height_in_meters)
n <- c(10:49)
print(n)
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
print(length(n))
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
m <- c(seq(10, 1))
print(M)
# Hint: use the `seq()` function
m <- c(seq(10, 1))
print(m)
x_range <- seq(-5, 10, .1)
print(x_range)
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range)))
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range))
x_range <- c(seq(-5, 10, .1))
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range))
x_range <- c(seq(-5, 10, .1))
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range))
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- c(cos(x_range))
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
